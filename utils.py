import subprocess
import requests
def convert_to_wav(input_ogg, output_wav):
    command = [
        "ffmpeg", "-y", "-i", input_ogg,
        "-acodec", "pcm_s16le", "-ac", "1", "-ar", "16000", output_wav
    ]
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode != 0:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr.decode()}")

emodzi_dict = {
    'anger': 'üò°',
    'disgust' : 'ü§Æ',
    'fear': 'üò±',
    'joy': 'üòÅ',
    'sadness': 'üò¢',
    'surprise': 'ü§©',
    'neutral': 'üòê'
}

emodzi_dict_audio = {
    'angry': 'üò°',
    'disgust' : 'ü§Æ',
    'fearful': 'üò±',
    'happy': 'üòÅ',
    'sad': 'üò¢',
    'surprised': 'ü§©',
    'neutral': 'üòê'
}

audio_to_text = {
    'angry': 'anger',
    'disgust': 'disgust',
    'fearful': 'fear',
    'happy': 'joy',
    'sad': 'sadness',
    'surprised': 'surprise',
    'neutral': 'neutral'
}

audio_russian = {
    'angry': '–∑–ª–æ—Å—Ç—å',
    'disgust': '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ',
    'fearful': '—Å—Ç—Ä–∞—Ö',
    'happy': '—Ä–∞–¥–æ—Å—Ç—å',
    'sad': '–≥—Ä—É—Å—Ç—å',
    'surprised': '—É–¥–∏–≤–ª–µ–Ω–∏–µ',
    'neutral': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
}

text_russian = {
    'anger': '–∑–ª–æ—Å—Ç—å',
    'disgust' : '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ',
    'fear': '—Å—Ç—Ä–∞—Ö',
    'joy': '—Ä–∞–¥–æ—Å—Ç—å',
    'sadness': '–≥—Ä—É—Å—Ç—å',
    'surprise': '—É–¥–∏–≤–ª–µ–Ω–∏–µ',
    'neutral': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
}

dict_emo = {
    'anger': 1,
    'disgust' : 2,
    'fear': 3,
    'happiness': 4,
    'sadness': 5,
    'enthusiasm': 6,
    'neutral': 7
}


import sqlite3

def init_db():
    conn = sqlite3.connect('bot_state.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS bot_activity (
            chat_id INTEGER PRIMARY KEY,
            is_active BOOLEAN
        )
    ''')
    conn.commit()
    conn.close()


def bot_activate(chat_id):
    conn = sqlite3.connect('bot_state.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO bot_activity (chat_id, is_active) 
        VALUES (?, ?)
        ON CONFLICT(chat_id) 
        DO UPDATE SET is_active = ?
    ''', (chat_id, True, True))
    conn.commit()
    conn.close()


def bot_deactivate(chat_id):
    conn = sqlite3.connect('bot_state.db')
    c = conn.cursor()

    c.execute('''
        INSERT INTO bot_activity (chat_id, is_active) 
        VALUES (?, ?)
        ON CONFLICT(chat_id) 
        DO UPDATE SET is_active = ?
    ''', (chat_id, False, False))
    conn.commit()
    conn.close()


def check_bot_state(chat_id):
    conn = sqlite3.connect('bot_state.db')
    c = conn.cursor()
    c.execute('SELECT is_active FROM bot_activity WHERE chat_id = ?', (chat_id,))
    result = c.fetchone()
    conn.close()
    if result is None:
        return False
    return result[0] == 1

def define_emotion(audio_emotion, text_emotion, message_text):
    if audio_emotion == "none":
        return f"–í—ã—è–≤–ª–µ–Ω–Ω–∞—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç–º–æ—Ü–∏—è ‚Äì {text_russian.get(text_emotion)}"
    is_equal = audio_to_text.get(audio_emotion) == text_emotion
    if is_equal or (text_emotion == "neutral" and audio_emotion != 'neutral'):
        return f"–í—ã—è–≤–ª–µ–Ω–Ω–∞—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —ç–º–æ—Ü–∏—è ‚Äì {audio_russian.get(audio_emotion)}.\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{message_text}"
    return f"–í—ã—è–≤–ª–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–º–æ—Ü–∏—è–º–∏ –≥–æ–ª–æ—Å–∞ ({audio_russian.get(audio_emotion)}) –∏ —Ç–µ–∫—Å—Ç–∞ ({text_russian.get(text_emotion)}).\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{message_text}"

import re
def clean_text(text):
    # - markdown (*, _, ^, >, ` –∏ —Ç.–ø.)
    text = re.sub(r'[*_`^>]', '', text)

    # - —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–∏–ø–∞ @username –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'@\w+', '', text)

    # - —Å—Å—ã–ª–∫–∏
    text = re.sub(r'http\S+|www\.\S+', '', text)

    # - –≤—Å—è–∫–∏–π –º—É—Å–æ—Ä –≤—Ä–æ–¥–µ "^(–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)", "^^", "(—á—Ç–æ-—Ç–æ –≤ —Å–∫–æ–±–∫–∞—Ö)"
    text = re.sub(r'\(\s*[^)]*\s*\)', '', text)  # –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text = re.sub(r'\[\s*[^]]*\s*\]', '', text)  # –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text = re.sub(r'\{[^}]*\}', '', text)  # —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏

    # - –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)

    # - –ª–∏–¥–∏—Ä—É—é—â–∏–µ/–∑–∞–º—ã–∫–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return text.strip()
